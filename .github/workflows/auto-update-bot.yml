name: Auto Update Bot

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.72
    branches: [ main, develop ]
    paths: 
      - '**'
  release:
    types: [published]
  workflow_dispatch:  # Allow manual triggering
    inputs:
      version:
        description: 'Version number (e.g., 1.0.72)'
        required: false
        default: ''

# Add proper permissions for creating releases
permissions:
  contents: write
  packages: write
  actions: read
  security-events: write

env:
  POCKETBASE_URL: ${{ secrets.POCKETBASE_URL }}
  POCKETBASE_ADMIN_EMAIL: ${{ secrets.POCKETBASE_ADMIN_EMAIL }}
  POCKETBASE_ADMIN_PASSWORD: ${{ secrets.POCKETBASE_ADMIN_PASSWORD }}

jobs:
  build-and-release:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python 3.13.0
      uses: actions/setup-python@v4
      with:
        python-version: '3.13.0'
        cache: 'pip'
    
    - name: Get version number
      id: version
      shell: pwsh
      run: |
        if (Test-Path "version.txt") {
          $version = Get-Content "version.txt" -Raw
          $version = $version.Trim()
        } elseif ("${{ github.event.inputs.version }}" -ne "") {
          $version = "${{ github.event.inputs.version }}"
          $version | Out-File -FilePath "version.txt" -Encoding utf8 -NoNewline
        } elseif ("${{ github.ref_type }}" -eq "tag") {
          $version = "${{ github.ref_name }}" -replace '^v', ''
          $version | Out-File -FilePath "version.txt" -Encoding utf8 -NoNewline
        } else {
          $version = "1.0.72"
          $version | Out-File -FilePath "version.txt" -Encoding utf8 -NoNewline
        }
        Write-Host "Version: $version"
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "tag=v$version" >> $env:GITHUB_OUTPUT
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Create virtual environment and install dependencies
      shell: pwsh
      run: |
        python -m venv venv
        .\venv\Scripts\Activate.ps1
        python -m pip install --upgrade pip
        pip install pyinstaller
        if (Test-Path "requirements.txt") {
          pip install -r requirements.txt
        }
        Write-Host "✅ Dependencies installed successfully"
    
    - name: Build executable with PyInstaller
      shell: pwsh
      run: |
        .\venv\Scripts\Activate.ps1
        Write-Host "🔨 Building executable..."
        
        # Create dist directory if it doesn't exist
        if (-not (Test-Path "dist")) {
          New-Item -ItemType Directory -Path "dist"
        }
        
        # Build with PyInstaller
        pyinstaller --onefile --name "PatrickDisplayBot-v${{ steps.version.outputs.version }}" --distpath "./dist" main.py
        
        # Verify the build
        if (Test-Path "dist/PatrickDisplayBot-v${{ steps.version.outputs.version }}.exe") {
          Write-Host "✅ Build successful!"
          $fileSize = (Get-Item "dist/PatrickDisplayBot-v${{ steps.version.outputs.version }}.exe").Length
          Write-Host "📦 File size: $([math]::Round($fileSize/1MB, 2)) MB"
        } else {
          Write-Host "❌ Build failed - executable not found"
          exit 1
        }
    
    - name: Verify executable
      shell: pwsh
      run: |
        $exePath = "dist/PatrickDisplayBot-v${{ steps.version.outputs.version }}.exe"
        if (Test-Path $exePath) {
          Write-Host "✅ Executable found: $exePath"
          $fileInfo = Get-Item $exePath
          Write-Host "📦 Size: $([math]::Round($fileInfo.Length/1MB, 2)) MB"
          Write-Host "📅 Created: $($fileInfo.CreationTime)"
        } else {
          Write-Host "❌ Executable not found!"
          Get-ChildItem -Path "dist" -Recurse
          exit 1
        }
    
    - name: Create Release Notes
      shell: pwsh
      run: |
        $releaseNotes = @"
        ## 🚀 Patrick Display Bot v${{ steps.version.outputs.version }}
        
        ### 📦 Download
        - **Windows Executable**: ``PatrickDisplayBot-v${{ steps.version.outputs.version }}.exe``
        
        ### 🔧 Installation
        1. Download the executable file
        2. Run ``PatrickDisplayBot-v${{ steps.version.outputs.version }}.exe``
        3. The bot will start automatically
        
        ### ✨ Features
        - Advanced Cycles Trading Strategy
        - Real-time market monitoring
        - Automated trade management
        - Risk management controls
        - Multi-account support
        
        ### 📋 Requirements
        - Windows 10/11
        - MetaTrader 5 installed
        - Active internet connection
        
        ### 🐛 Bug Reports
        If you encounter any issues, please report them in the GitHub Issues section.
        
        ---
        **Build Info:**
        - Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
        - Commit: ${{ github.sha }}
        - Python Version: 3.13.0
        "@
        
        $releaseNotes | Out-File -FilePath "release-notes.md" -Encoding utf8
        Write-Host "✅ Release notes created"
    
    - name: Create GitHub Release
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Check if tag exists, if not create it
        $tagExists = git tag -l "${{ steps.version.outputs.tag }}"
        if (-not $tagExists) {
          Write-Host "Creating tag ${{ steps.version.outputs.tag }}..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "${{ steps.version.outputs.tag }}"
          git push origin "${{ steps.version.outputs.tag }}"
        }
        
        # Create release using gh CLI
        Write-Host "Creating GitHub release..."
        gh release create "${{ steps.version.outputs.tag }}" `
          --title "Patrick Display Bot v${{ steps.version.outputs.version }}" `
          --notes-file "release-notes.md" `
          --latest `
          "dist/PatrickDisplayBot-v${{ steps.version.outputs.version }}.exe#Windows Executable"
        
        Write-Host "✅ GitHub release created successfully!"
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: patrick-display-bot-v${{ steps.version.outputs.version }}
        path: |
          dist/PatrickDisplayBot-v${{ steps.version.outputs.version }}.exe
          release-notes.md
        retention-days: 30
    
    - name: Build Summary
      shell: pwsh
      run: |
        Write-Host ""
        Write-Host "🎉 BUILD COMPLETED SUCCESSFULLY! 🎉"
        Write-Host "========================================"
        Write-Host "📦 Version: ${{ steps.version.outputs.version }}"
        Write-Host "🏷️  Tag: ${{ steps.version.outputs.tag }}"
        Write-Host "💾 Executable: PatrickDisplayBot-v${{ steps.version.outputs.version }}.exe"
        Write-Host ""
        Write-Host "🔗 Download your release at:"
        Write-Host "   https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}"
        Write-Host ""
        Write-Host "✅ The executable is now available for download!" 