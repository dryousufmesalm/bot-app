name: Auto Update Bot

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'bot app/**'
  release:
    types: [published]

env:
  POCKETBASE_URL: ${{ secrets.POCKETBASE_URL }}
  POCKETBASE_ADMIN_EMAIL: ${{ secrets.POCKETBASE_ADMIN_EMAIL }}
  POCKETBASE_ADMIN_PASSWORD: ${{ secrets.POCKETBASE_ADMIN_PASSWORD }}

jobs:
  build-and-upload:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python 3.13.0
      uses: actions/setup-python@v4
      with:
        python-version: 3.13.0
        architecture: 'x64'
    
    - name: Debug directory structure
      shell: pwsh
      run: |
        Write-Host "Current directory:"
        Get-Location
        Write-Host "Directory contents:"
        Get-ChildItem
        Write-Host "Looking for bot app directory:"
        if (Test-Path "bot app") {
          Write-Host "✅ 'bot app' directory found"
          Get-ChildItem "bot app" | Select-Object Name
        } else {
          Write-Host "❌ 'bot app' directory not found"
        }
    
    - name: Install dependencies
      shell: pwsh
      run: |
        python -m pip install --upgrade pip
        Set-Location "bot app"
        pip install -r requirements.txt
        pip install requests pyinstaller
    
    - name: Get version info
      id: version
      shell: pwsh
      run: |
        if (Test-Path "bot app/version.txt") {
          $VERSION = Get-Content "bot app/version.txt" -Raw
          $VERSION = $VERSION.Trim()
        } else {
          $COMMIT_HASH = git rev-parse --short HEAD
          $VERSION = "dev-$COMMIT_HASH"
        }
        
        echo "version=$VERSION" >> $env:GITHUB_OUTPUT
        Write-Host "Build version: $VERSION"
        
        $UPDATE_TYPE = "patch"
        echo "update_type=$UPDATE_TYPE" >> $env:GITHUB_OUTPUT
        Write-Host "Update type: $UPDATE_TYPE"
    
    - name: Build Windows EXE
      shell: pwsh
      run: |
        Set-Location "bot app"
        flet pack main.py --name "PatrickDisplayBot" --product-name "Patrick Display Bot"
        
        if (Test-Path "./dist/PatrickDisplayBot.exe") {
          Write-Host "✅ EXE build successful"
          Get-ChildItem "./dist/PatrickDisplayBot.exe" | Format-List Name, Length
        } else {
          Write-Host "❌ EXE build failed"
          exit 1
        }
    
    - name: Create update package
      id: package
      shell: pwsh
      run: |
        $VERSION = "${{ steps.version.outputs.version }}"
        $PACKAGE_NAME = "patrick-display-bot-$VERSION.zip"
        
        Write-Host "Creating update package: $PACKAGE_NAME"
        
        New-Item -ItemType Directory -Path "temp_package" -Force
        Copy-Item -Path "bot app" -Destination "temp_package/" -Recurse
        New-Item -ItemType Directory -Path "temp_package/bot app/dist" -Force
        Copy-Item -Path "bot app/dist/PatrickDisplayBot.exe" -Destination "temp_package/bot app/dist/"
        
        Compress-Archive -Path "temp_package/*" -DestinationPath $PACKAGE_NAME -Force
        
        echo "package_path=$PACKAGE_NAME" >> $env:GITHUB_OUTPUT
        $fileSize = (Get-Item $PACKAGE_NAME).Length / 1MB
        Write-Host "Package created: $PACKAGE_NAME ($($fileSize.ToString('F2')) MB)"
    
    - name: Notify success
      shell: pwsh
      run: |
        Write-Host "🎉 Windows bot update package created successfully!"
        Write-Host "Version: ${{ steps.version.outputs.version }}"
        Write-Host "Package: ${{ steps.package.outputs.package_path }}" 