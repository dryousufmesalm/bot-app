name: Build EXE

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

env:
  POCKETBASE_URL: ${{ secrets.POCKETBASE_URL }}
  POCKETBASE_ADMIN_EMAIL: ${{ secrets.POCKETBASE_ADMIN_EMAIL }}
  POCKETBASE_ADMIN_PASSWORD: ${{ secrets.POCKETBASE_ADMIN_PASSWORD }}

jobs:
  build_and_test:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.13.0
      uses: actions/setup-python@v5
      with:
        python-version: '3.13.0'
        architecture: 'x64'
        cache: 'pip'

    - name: Set version (simple auto-increment)
      id: version
      shell: pwsh
      run: |
        # Simple version based on build number - always unique
        $version = "1.0.${{ github.run_number }}"
        $tag = "v$version"
        
        Write-Host "üè∑Ô∏è Version: $version"
        Write-Host "üè∑Ô∏è Tag: $tag"
        
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "tag=$tag" >> $env:GITHUB_OUTPUT

    - name: Install Dependencies 
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Build EXE with Flet
      shell: pwsh
      run: |
        Write-Host "üî® Building EXE with Flet..."
        flet pack main.py --name "PatrickDisplayBot-v${{ steps.version.outputs.version }}" --distpath "./dist"
        
        # Verify the build
        $exeName = "PatrickDisplayBot-v${{ steps.version.outputs.version }}.exe"
        if (Test-Path "./dist/$exeName") {
          Write-Host "‚úÖ Build successful: $exeName"
          $fileSize = (Get-Item "./dist/$exeName").Length
          Write-Host "üì¶ File size: $([math]::Round($fileSize/1MB, 2)) MB"
        } else {
          Write-Host "‚ùå Build failed - checking for any exe files..."
          Get-ChildItem "./dist" -Filter "*.exe" -ErrorAction SilentlyContinue
          exit 1
        }

    - name: Upload EXE Artifact
      uses: actions/upload-artifact@v4
      with:
        name: patrick-display-bot-v${{ steps.version.outputs.version }}
        path: "./dist/PatrickDisplayBot-v${{ steps.version.outputs.version }}.exe"
        retention-days: 30
      
    - name: Create GitHub Release
      id: github_release
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      run: |
        Write-Host "üöÄ Creating GitHub release v${{ steps.version.outputs.version }}..."
        
        # Create release notes
        $releaseNotes = @"
        ## üöÄ Patrick Display Bot v${{ steps.version.outputs.version }}
        
        ### üì¶ Download
        - **Windows Executable**: PatrickDisplayBot-v${{ steps.version.outputs.version }}.exe
        
        ### üîß Installation
        1. Download the executable file
        2. Run the .exe file
        3. The bot will start automatically
        
        ### ‚ú® Features
        - Advanced Cycles Trading Strategy
        - Real-time market monitoring
        - Automated trade management
        - Risk management controls
        - Multi-account support
        
        ### üìã Requirements
        - Windows 10/11
        - MetaTrader 5 installed
        - Active internet connection
        
        ---
        **Build Info:**
        - Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
        - Build Number: ${{ github.run_number }}
        - Commit: ${{ github.sha }}
        "@
        
        $releaseNotes | Out-File -FilePath "release-notes.md" -Encoding utf8
        
        # Create release using gh CLI (this automatically creates the tag)
        Write-Host "üì¶ Creating release with tag ${{ steps.version.outputs.tag }}..."
        gh release create "${{ steps.version.outputs.tag }}" `
          --title "Patrick Display Bot v${{ steps.version.outputs.version }}" `
          --notes-file "release-notes.md" `
          --latest `
          "./dist/PatrickDisplayBot-v${{ steps.version.outputs.version }}.exe#Windows Executable"
        
        Write-Host "‚úÖ GitHub release created successfully!"
        
        # Set outputs for PocketBase
        $releaseUrl = "https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}"
        $downloadUrl = "https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.tag }}/PatrickDisplayBot-v${{ steps.version.outputs.version }}.exe"
        
        echo "release_url=$releaseUrl" >> $env:GITHUB_OUTPUT
        echo "download_url=$downloadUrl" >> $env:GITHUB_OUTPUT

    - name: Upload to PocketBase
      shell: pwsh
      run: |
        Write-Host "üöÄ Uploading release info to PocketBase..."
        
        # Check if PocketBase credentials are available
        if (-not $env:POCKETBASE_URL -or -not $env:POCKETBASE_ADMIN_EMAIL -or -not $env:POCKETBASE_ADMIN_PASSWORD) {
          Write-Host "‚ö†Ô∏è PocketBase credentials not found - skipping upload"
          exit 0
        }
        
        try {
          # Authenticate with PocketBase (using admin auth endpoint)
          Write-Host "üîê Authenticating with PocketBase..."
          $authBody = @{
            identity = $env:POCKETBASE_ADMIN_EMAIL
            password = $env:POCKETBASE_ADMIN_PASSWORD
          } | ConvertTo-Json
          
          $authResponse = Invoke-RestMethod -Uri "$env:POCKETBASE_URL/api/collections/users/auth-with-password" -Method POST -Body $authBody -ContentType "application/json"
          $token = $authResponse.token
          Write-Host "‚úÖ PocketBase authentication successful"
          
          # Prepare form data
          $boundary = [System.Guid]::NewGuid().ToString()
          $LF = "`r`n"
          $filePath = "./dist/PatrickDisplayBot-v${{ steps.version.outputs.version }}.exe"
          
          # Create form data content
          $bodyLines = @(
              "--$boundary",
              "Content-Disposition: form-data; name=`"version`"$LF",
              "${{ steps.version.outputs.version }}",
              "--$boundary",
              "Content-Disposition: form-data; name=`"force_update`"$LF",
              "false",
              "--$boundary",
              "Content-Disposition: form-data; name=`"patch`"$LF",
              "${{ github.run_number }}",
              "--$boundary",
              "Content-Disposition: form-data; name=`"rollback`"$LF",
              "false",
              "--$boundary",
              "Content-Disposition: form-data; name=`"platform`"$LF",
              "bot",
              "--$boundary",
              "Content-Disposition: form-data; name=`"type`"$LF",
              "release",
              "--$boundary",
              "Content-Disposition: form-data; name=`"serve_to`"$LF",
              "[`"all`"]",
              "--$boundary",
              "Content-Disposition: form-data; name=`"description`"$LF",
              "$(Get-Content -Path `"release-notes.md`" -Raw)",
              "--$boundary",
              "Content-Disposition: form-data; name=`"attachment`"; filename=`"PatrickDisplayBot-v${{ steps.version.outputs.version }}.exe`"",
              "Content-Type: application/octet-stream$LF",
              "$([System.IO.File]::ReadAllBytes($filePath))",
              "--$boundary--"
          )
          
          $body = $bodyLines -join $LF
          
          # Upload to PocketBase updates collection
          Write-Host "üì§ Uploading release data to PocketBase..."
          $headers = @{
            "Authorization" = "Bearer $token"
            "Content-Type" = "multipart/form-data; boundary=$boundary"
          }
          
          $uploadResponse = Invoke-RestMethod -Uri "$env:POCKETBASE_URL/api/collections/updates/records" -Method POST -Body $body -Headers $headers
          
          Write-Host "‚úÖ Successfully uploaded to PocketBase!"
          Write-Host "üìã Record ID: $($uploadResponse.id)"
          
        } catch {
          Write-Host "‚ùå Failed to upload to PocketBase: $($_.Exception.Message)"
          Write-Host "Response: $($_.Exception.Response)"
          Write-Host "‚ö†Ô∏è PocketBase upload failed, but GitHub release was successful"
          exit 1
        }
    
    - name: Build Summary
      shell: pwsh
      run: |
        Write-Host ""
        Write-Host "üéâ BUILD COMPLETED SUCCESSFULLY! üéâ"
        Write-Host "========================================"
        Write-Host "üì¶ Version: ${{ steps.version.outputs.version }}"
        Write-Host "üè∑Ô∏è  Tag: ${{ steps.version.outputs.tag }}"
        Write-Host "üíæ Executable: PatrickDisplayBot-v${{ steps.version.outputs.version }}.exe"
        Write-Host ""
        Write-Host "üîó Download your release at:"
        Write-Host "   https://github.com/${{ github.repository }}/releases/latest"
        Write-Host ""
        Write-Host "‚úÖ The executable is now available for download!" 